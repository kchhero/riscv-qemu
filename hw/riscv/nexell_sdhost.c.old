/*
 * Raspberry Pi (NEXELL) SD Host Controller
 *
 * Copyright (c) 2017 Antfield SAS
 *
 * Authors:
 *  Clement Deschamps <clement.deschamps@antfield.fr>
 *  Luc Michel <luc.michel@antfield.fr>
 *
 * This work is licensed under the terms of the GNU GPL, version 2 or later.
 * See the COPYING file in the top-level directory.
 */

#include "qemu/osdep.h"
#include "qemu/log.h"
#include "sysemu/blockdev.h"
#include "hw/riscv/nexell_sdhost.h"

#define TYPE_NEXELL_SDHOST_BUS "nexell.sdmmc.bus"
#define NEXELL_SDHOST_BUS(obj) \
    OBJECT_CHECK(SDBus, (obj), TYPE_NEXELL_SDHOST_BUS)


/* static void nexell_sdhost_update_irq(NexellSDMMCState *s) */
/* { */
/*     uint32_t irq = s->status & */
/*         (SDHSTS_BUSY_IRPT | SDHSTS_BLOCK_IRPT | SDHSTS_SDIO_IRPT); */
/*     qemu_set_irq(s->irq, !!irq); */
    
/*     printf("[SUKER-QEMU] %s Done\n",__func__); */
/* } */

/* static void nexell_sdhost_send_command(NexellSDMMCState *s) */
/* { */
/*     SDRequest request; */
/*     uint8_t rsp[16]; */
/*     int rlen; */

/*     request.cmd = s->cmd & SDCMD_CMD_MASK; */
/*     request.arg = s->cmdarg; */

/*     rlen = sdbus_do_command(&s->sdbus, &request, rsp); */
/*     if (rlen < 0) { */
/*         goto error; */
/*     } */
/*     if (!(s->cmd & SDCMD_NO_RESPONSE)) { */
/* #define RWORD(n) (((uint32_t)rsp[n] << 24) | (rsp[n + 1] << 16) \ */
/*                   | (rsp[n + 2] << 8) | rsp[n + 3]) */
/*         if (rlen == 0 || (rlen == 4 && (s->cmd & SDCMD_LONG_RESPONSE))) { */
/*             goto error; */
/*         } */
/*         if (rlen != 4 && rlen != 16) { */
/*             goto error; */
/*         } */
/*         if (rlen == 4) { */
/*             s->rsp[0] = RWORD(0); */
/*             s->rsp[1] = s->rsp[2] = s->rsp[3] = 0; */
/*         } else { */
/*             s->rsp[0] = RWORD(12); */
/*             s->rsp[1] = RWORD(8); */
/*             s->rsp[2] = RWORD(4); */
/*             s->rsp[3] = RWORD(0); */
/*         } */
/* #undef RWORD */
/*     } */
/*     printf("[SUKER-QEMU] %s Done\n",__func__); */
/*     return; */

/* error: */
/*     s->cmd |= SDCMD_FAIL_FLAG; */
/*     s->status |= SDHSTS_CMD_TIME_OUT; */
/* } */

/* static void nexell_sdhost_fifo_push(NexellSDMMCState *s, uint32_t value) */
/* { */
/*     int n; */

/*     if (s->fifo_len == NEXELL_SDHOST_FIFO_LEN) { */
/*         /\* FIFO overflow *\/ */
/*         return; */
/*     } */
/*     n = (s->fifo_pos + s->fifo_len) & (NEXELL_SDHOST_FIFO_LEN - 1); */
/*     s->fifo_len++; */
/*     s->fifo[n] = value; */
    
/*     printf("[SUKER-QEMU] %s Done\n",__func__); */
/* } */

/* static uint32_t nexell_sdhost_fifo_pop(NexellSDMMCState *s) */
/* { */
/*     uint32_t value; */

/*     if (s->fifo_len == 0) { */
/*         /\* FIFO underflow *\/ */
/*         return 0; */
/*     } */
/*     value = s->fifo[s->fifo_pos]; */
/*     s->fifo_len--; */
/*     s->fifo_pos = (s->fifo_pos + 1) & (NEXELL_SDHOST_FIFO_LEN - 1); */
/*     printf("[SUKER-QEMU] %s Done\n",__func__);     */
/*     return value; */
/* } */

/* static void nexell_sdhost_fifo_run(NexellSDMMCState *s) */
/* { */
/*     uint32_t value = 0; */
/*     int n; */
/*     int is_read; */

/*     is_read = (s->cmd & SDCMD_READ_CMD) != 0; */
/*     if (s->datacnt != 0 && (!is_read || sdbus_data_ready(&s->sdbus))) { */
/*         if (is_read) { */
/*             n = 0; */
/*             while (s->datacnt && s->fifo_len < NEXELL_SDHOST_FIFO_LEN) { */
/*                 value |= (uint32_t)sdbus_read_data(&s->sdbus) << (n * 8); */
/*                 s->datacnt--; */
/*                 n++; */
/*                 if (n == 4) { */
/*                     nexell_sdhost_fifo_push(s, value); */
/*                     n = 0; */
/*                     value = 0; */
/*                 } */
/*             } */
/*             if (n != 0) { */
/*                 nexell_sdhost_fifo_push(s, value); */
/*             } */
/*         } else { /\* write *\/ */
/*             n = 0; */
/*             while (s->datacnt > 0 && (s->fifo_len > 0 || n > 0)) { */
/*                 if (n == 0) { */
/*                     value = nexell_sdhost_fifo_pop(s); */
/*                     n = 4; */
/*                 } */
/*                 n--; */
/*                 s->datacnt--; */
/*                 sdbus_write_data(&s->sdbus, value & 0xff); */
/*                 value >>= 8; */
/*             } */
/*         } */
/*     } */
/*     if (s->datacnt == 0) { */
/*         s->status |= SDHSTS_DATA_FLAG; */

/*         s->edm &= ~0xf; */
/*         s->edm |= SDEDM_FSM_DATAMODE; */

/*         if (s->config & SDHCFG_DATA_IRPT_EN) { */
/*             s->status |= SDHSTS_SDIO_IRPT; */
/*         } */

/*         if ((s->cmd & SDCMD_BUSYWAIT) && (s->config & SDHCFG_BUSY_IRPT_EN)) { */
/*             s->status |= SDHSTS_BUSY_IRPT; */
/*         } */

/*         if ((s->cmd & SDCMD_WRITE_CMD) && (s->config & SDHCFG_BLOCK_IRPT_EN)) { */
/*             s->status |= SDHSTS_BLOCK_IRPT; */
/*         } */

/*         nexell_sdhost_update_irq(s); */
/*     } */

/*     s->edm &= ~(0x1f << 4); */
/*     s->edm |= ((s->fifo_len & 0x1f) << 4); */
    
/*     printf("[SUKER-QEMU] %s Done\n",__func__); */
/* } */

static uint64_t nexell_sdhost_read(void *opaque, hwaddr offset,
    unsigned size)
{
//    NexellSDMMCState *s = (NexellSDMMCState *)opaque;
    uint32_t res = 0;

    printf("[SUKER-QEMU] %s : hwaddr offset = 0x%lx\n",__func__, offset);

    /* switch (offset) { */
    /* case SDCMD: */
    /*     res = s->cmd; */
    /*     break; */
    /* case SDHSTS: */
    /*     res = s->status; */
    /*     break; */
    /* case SDRSP0: */
    /*     res = s->rsp[0]; */
    /*     break; */
    /* case SDRSP1: */
    /*     res = s->rsp[1]; */
    /*     break; */
    /* case SDRSP2: */
    /*     res = s->rsp[2]; */
    /*     break; */
    /* case SDRSP3: */
    /*     res = s->rsp[3]; */
    /*     break; */
    /* case SDEDM: */
    /*     res = s->edm; */
    /*     break; */
    /* case SDVDD: */
    /*     res = s->vdd; */
    /*     break; */
    /* case SDDATA: */
    /*     res = nexell_sdhost_fifo_pop(s); */
    /*     nexell_sdhost_fifo_run(s); */
    /*     break; */
    /* case SDHBCT: */
    /*     res = s->hbct; */
    /*     break; */
    /* case SDHBLC: */
    /*     res = s->hblc; */
    /*     break; */

    /* default: */
    /*     qemu_log_mask(LOG_GUEST_ERROR, "%s: Bad offset %"HWADDR_PRIx"\n", */
    /*                   __func__, offset); */
    /*     res = 0; */
    /*     break; */
    /* } */

    printf("[SUKER-QEMU] %s Done\n",__func__);
    return res;
}

static void nexell_sdhost_write(void *opaque, hwaddr offset,
    uint64_t value, unsigned size)
{
    /* NexellSDMMCState *s = (NexellSDMMCState *)opaque; */

    /* switch (offset) { */
    /* case SDCMD: */
    /*     s->cmd = value; */
    /*     if (value & SDCMD_NEW_FLAG) { */
    /*         nexell_sdhost_send_command(s); */
    /*         nexell_sdhost_fifo_run(s); */
    /*         s->cmd &= ~SDCMD_NEW_FLAG; */
    /*     } */
    /*     break; */
    /* case SDTOUT: */
    /*     break; */
    /* case SDCDIV: */
    /*     break; */
    /* case SDHSTS: */
    /*     s->status &= ~value; */
    /*     nexell_sdhost_update_irq(s); */
    /*     break; */
    /* case SDARG: */
    /*     s->cmdarg = value; */
    /*     break; */
    /* case SDEDM: */
    /*     if ((value & 0xf) == 0xf) { */
    /*         /\* power down *\/ */
    /*         value &= ~0xf; */
    /*     } */
    /*     s->edm = value; */
    /*     break; */
    /* case SDHCFG: */
    /*     s->config = value; */
    /*     nexell_sdhost_fifo_run(s); */
    /*     break; */
    /* case SDVDD: */
    /*     s->vdd = value; */
    /*     break; */
    /* case SDDATA: */
    /*     nexell_sdhost_fifo_push(s, value); */
    /*     nexell_sdhost_fifo_run(s); */
    /*     break; */
    /* case SDHBCT: */
    /*     s->hbct = value; */
    /*     break; */
    /* case SDHBLC: */
    /*     s->hblc = value; */
    /*     s->datacnt = s->hblc * s->hbct; */
    /*     nexell_sdhost_fifo_run(s); */
    /*     break; */

    /* default: */
    /*     qemu_log_mask(LOG_GUEST_ERROR, "%s: Bad offset %"HWADDR_PRIx"\n", */
    /*                   __func__, offset); */
    /*     break; */
    /* } */
    printf("[SUKER-QEMU] %s Done\n",__func__);
}

static const MemoryRegionOps nexell_sdhost_ops = {
    .read = nexell_sdhost_read,
    .write = nexell_sdhost_write,
    .endianness = DEVICE_NATIVE_ENDIAN,
};

static const VMStateDescription vmstate_nexell_sdhost = {
    .name = TYPE_NEXELL_SDHOST,
    .version_id = 1,
    .minimum_version_id = 1,
    /* .fields = (VMStateField[]) { */
    /*     VMSTATE_UINT32(cmd, NexellSDMMCState), */
    /*     VMSTATE_UINT32(cmdarg, NexellSDMMCState), */
    /*     VMSTATE_UINT32(status, NexellSDMMCState), */
    /*     VMSTATE_UINT32_ARRAY(rsp, NexellSDMMCState, 4), */
    /*     VMSTATE_UINT32(config, NexellSDMMCState), */
    /*     VMSTATE_UINT32(edm, NexellSDMMCState), */
    /*     VMSTATE_UINT32(vdd, NexellSDMMCState), */
    /*     VMSTATE_UINT32(hbct, NexellSDMMCState), */
    /*     VMSTATE_UINT32(hblc, NexellSDMMCState), */
    /*     VMSTATE_INT32(fifo_pos, NexellSDMMCState), */
    /*     VMSTATE_INT32(fifo_len, NexellSDMMCState), */
    /*     VMSTATE_UINT32_ARRAY(fifo, NexellSDMMCState, NEXELL_SDHOST_FIFO_LEN), */
    /*     VMSTATE_UINT32(datacnt, NexellSDMMCState), */
    /*     VMSTATE_END_OF_LIST() */
    /* } */
};

static void nexell_sdhost_init(Object *obj)
{
    NexellSDMMCState *s = NEXELL_SDHOST(obj);

    qbus_create_inplace(&s->sdbus, sizeof(s->sdbus),
                        TYPE_NEXELL_SDHOST_BUS, DEVICE(s), "sd-bus");

    memory_region_init_io(&s->iomem, obj, &nexell_sdhost_ops, s,
                          TYPE_NEXELL_SDHOST, 0x1000);
    sysbus_init_mmio(SYS_BUS_DEVICE(s), &s->iomem);
    sysbus_init_irq(SYS_BUS_DEVICE(s), &s->irq);
}

static void nexell_sdhost_reset(DeviceState *dev)
{
    //NexellSDMMCState *s = NEXELL_SDHOST(dev);

    /* s->cmd = 0; */
    /* s->cmdarg = 0; */
    /* s->edm = 0x0000c60f; */
    /* s->config = 0; */
    /* s->hbct = 0; */
    /* s->hblc = 0; */
    /* s->datacnt = 0; */
    /* s->fifo_pos = 0; */
    /* s->fifo_len = 0; */
    printf("[SUKER-QEMU] %s Done\n",__func__);
}

static void nexell_sdhost_class_init(ObjectClass *klass, void *data)
{
    DeviceClass *dc = DEVICE_CLASS(klass);

    dc->reset = nexell_sdhost_reset;
    dc->vmsd = &vmstate_nexell_sdhost;
}

static TypeInfo nexell_sdhost_info = {
    .name          = TYPE_NEXELL_SDHOST,
    .parent        = TYPE_SYS_BUS_DEVICE,
    .instance_size = sizeof(NexellSDMMCState),
    .class_init    = nexell_sdhost_class_init,
    .instance_init = nexell_sdhost_init,
};

static const TypeInfo nexell_sdhost_bus_info = {
    .name = TYPE_NEXELL_SDHOST_BUS,
    .parent = TYPE_SD_BUS,
    .instance_size = sizeof(SDBus),
};

static void nexell_sdhost_register_types(void)
{
    type_register_static(&nexell_sdhost_info);
    type_register_static(&nexell_sdhost_bus_info);
}

/* NexellSDMMCState *nexell_sdmmc_create(MemoryRegion *address_space, hwaddr base, */
/*     qemu_irq irq) */
/* { */
/*     char name[20]; */
/*     Error *err = NULL; */

/*     NexellSDMMCState *s = g_malloc0(sizeof(NexellSDHostState)); */
/*     s->irq = irq; */
/*     object_initialize(&s->nx_sdhci[i], sizeof(s->nx_sdhci[i]), TYPE_NEXELL_SDHOST); */

/*     snprintf(name, 20, "sdhost%d", i + 1); */
/*     object_property_add_child(OBJECT(machine), name, OBJECT(&s->nx_sdhci[i]), NULL);         */
/*     qdev_set_parent_bus(DEVICE(&s->nx_sdhci[i]), sysbus_get_default()); */



    
/*     object_property_set_bool(OBJECT(&s->nx_sdhci[i]), true, "realized", &err); */
/*     if (err) { */
/*         return; */
/*     } */

/*     memory_region_add_subregion(address_space, base, */
/*                                 sysbus_mmio_get_region(SYS_BUS_DEVICE(&s->nx_sdhci[i]), 0)); */
/*     sysbus_connect_irq(SYS_BUS_DEVICE(&s->nx_sdhci[i]), 0, */
/*                        NEXELL_PLIC(s->plic)->irqs[sdhci_irq[i]]); */



    
/*     NexellUARTState *s = g_malloc0(sizeof(NexellUARTState)); */
/*     s->irq = irq; */
/*     qemu_chr_fe_init(&s->chr, chr, &error_abort); */
/*     qemu_chr_fe_set_handlers(&s->chr, uart_can_rx, uart_rx, uart_event, */
/*         uart_be_change, s, NULL, true); */
/*     memory_region_init_io(&s->mmio, NULL, &uart_ops, s, */
/*                           TYPE_NEXELL_UART, NEXELL_UART_MAX); */
/*     memory_region_add_subregion(address_space, base, &s->mmio); */
/*     return s; */
/* } */

type_init(nexell_sdhost_register_types)
