/*
 * QEMU model of the SDMMC on the SiFive E300 and U500 series SOCs.
 *
 * Copyright (c) 2016 Stefan O'Rear
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2 or later, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include "qemu/osdep.h"
#include "qapi/error.h"
#include "hw/sysbus.h"
#include "chardev/char.h"
#include "chardev/char-fe.h"
#include "target/riscv/cpu.h"
#include "hw/riscv/nexell_sdmmc.h"

static const struct sdmmcMapEntry {
    hwaddr offset;
    char   name[32];
} nx_sdmmc_regmap[] = {
/*   volatile U16 UHS_II_BLOCK_SIZE_R;    //0x80 */
/*   volatile U16 UHS_II_BLOCK_COUNT_R;   //0x84 */
/*   volatile U16 UHS_II_COMMAND_PKT_0_3_R;   //0x88 */
/*   volatile U16 UHS_II_COMMAND_PKT_4_7_R;   //0x8c */
/*   volatile U16 UHS_II_COMMAND_PKT_8_11_R;  //0x90 */
/*   volatile U16 UHS_II_COMMAND_PKT_12_15_R; //0x94 */
/*   volatile U16 UHS_II_COMMAND_PKT_16_19_R; //0x98 */
/*   volatile U16 UHS_II_XFER_MODE_R;      //0x9c */
/*   volatile U16 UHS_II_CMD_R;            //0x9e */
/*   volatile U16 UHS_II_RESP_0_3_R;       //0xa0 */
/*   volatile U16 UHS_II_RESP_4_7_R;       //0xa4 */
/*   volatile U16 UHS_II_RESP_8_11_R;      //0xa8 */
/*   volatile U16 UHS_II_RESP_12_15_R;     //0xac */
/*   volatile U16 UHS_II_RESP_16_19_R;     //0xb0 */
/*   volatile U16 UHS_II_MSG_SEL_R;        //0xb4 */
/*   volatile U16 UHS_II_MSG_R;            //0xb8 */
/*   volatile U16 UHS_II_DEV_INTR_STATUS_R;//0xbc */
/*   volatile U16 UHS_II_DEV_SEL_R;        //0xbe */
/*   volatile U16 UHS_II_DEV_INR_CODE_R;   //0xbf */
/*   volatile U16 UHS_II_SOFT_RESET_R;     //0xc0 */
/*   volatile U16 UHS_II_TIMER_CNTRL_R;    //0xc2 */
/*   volatile U16 UHS_II_ERR_INTR_STATUS_R;//0xc4 */
/*   volatile U16 UHS_II_ERR_INTR_STATUS_EN_R;  //0xc8 */
/*   volatile U16 UHS_II_ERR_INTR_SIGNAL_EN_R;  //0xcc */
/*   volatile U16 P_UHS_II_SETTINGS_R;          //0xe0 */
/*   volatile U16 P_UHS_II_HOST_CAPAB;          //0xe2 */
/*   volatile U16 P_UHS_II_TEST;                //0xe4 */
/*   volatile U16 P_EMBEDDED_CNTRL;             //0xe6 */
/*   volatile U16 P_VENDOR_SPECIFIC_AREA;       //0xe8 */
/*   volatile U16 P_VENDOR2_SPECIFIC_AREA;      //0xea */
/*   volatile U16 SLOT_INTR_STATUS_R;           //0xfc */
/*   volatile U16 HOST_CNTRL_VERS_R;            //0xfe       //Host Controller Version */


    [NEXELL_SDMMC__SDMASA_R]     = { 0x0 , "SDMASA" },
    [NEXELL_SDMMC__BLOCKSIZE_R]  = { 0x4 , "BLOCKSIZE" },
    [NEXELL_SDMMC__BLOCKCOUNT_R] = { 0x6 , "BLOCKCOUNT" },
    [NEXELL_SDMMC__ARGUMENT_R]   = { 0x8 , "ARGUMENT" },
    [NEXELL_SDMMC__XFER_MODE_R]  = { 0xc , "XFER_MODE" },
    [NEXELL_SDMMC__CMD_R]        = { 0xe , "CMD" },
    [NEXELL_SDMMC__RESP01_R]     = { 0x10, "RESP01" },
    [NEXELL_SDMMC__RESP23_R]     = { 0x14, "RESP23" },
    [NEXELL_SDMMC__RESP45_R]     = { 0x18, "RESP45" },
    [NEXELL_SDMMC__RESP67_R]     = { 0x1c, "RESP67"},
    [NEXELL_SDMMC__BUF_DATA_R]   = { 0x20, "BUF_DATA"},
    [NEXELL_SDMMC__PSTATE_REG]   = { 0x24, "PSTATE_REG"},
    [NEXELL_SDMMC__HOST_CTRL1_R] = { 0x28, "HOST_CTRL1"},
    [NEXELL_SDMMC__PWR_CTRL_R]   = { 0x29, "PWR_CTRL"},
    [NEXELL_SDMMC__BGAP_CTRL_R]  = { 0x2a, "BGAP_CTRL"},
    [NEXELL_SDMMC__WUP_CTRL_R]   = { 0x2b, "WUP_CTRL"},
    [NEXELL_SDMMC__CLK_CTRL_R]   = { 0x2c, "CLK_CTRL"},
    [NEXELL_SDMMC__TOUT_CTRL_R]             = { 0x2e, "TOUT_CTRL"},
    [NEXELL_SDMMC__SW_RST_R]                = { 0x2f, "SW_RST"},
    [NEXELL_SDMMC__NORMAL_INT_STAT_R]       = { 0x30, "NORMAL_INT_STAT"},
    [NEXELL_SDMMC__ERROR_INT_STAT_R]        = { 0x32, "ERROR_INT_STAT"},
    [NEXELL_SDMMC__NORMAL_INT_STAT_EN_R]    = { 0x34, "NORRMAL_INT_STAT_EN"},
    [NEXELL_SDMMC__ERROR_INT_STAT_EN_R]     = { 0x36, "ERROR_INT_STAT_EN"},
    [NEXELL_SDMMC__NORMAL_INT_SIGNAL_EN_R]  = { 0x38, "NORMAL_INT_SIGNAL_EN"},
    [NEXELL_SDMMC__ERROR_INT_SIGNAL_EN_R]   = { 0x3a, "ERROR_INT_SIGNAL_EN"},
    [NEXELL_SDMMC__AUTO_CMD_STAT_R]         = { 0x3c, "AUTO_CMD_STAT"},
    [NEXELL_SDMMC__HOST_CTRL2_R]            = { 0x3e, "HOST_CTRL2"},
    [NEXELL_SDMMC__CAPABILITIES1_R]         = { 0x40, "CAPABILITIES1"},
    [NEXELL_SDMMC__CAPABILITIES2_R]         = { 0x44, "CAPABILITIES2"},
    [NEXELL_SDMMC__CURR_CAPABILITIES1_R]    = { 0x48, "CURR_CAPABILITIES1"},
    [NEXELL_SDMMC__CURR_CAPABILITIES2_R]    = { 0x4c, "CURR_CAPABILITIES2"},
    [NEXELL_SDMMC__FORCE_AUTO_CMD_STAT_R]   = { 0x50, "FORCE_AUTO_CMD_STAT"},
    [NEXELL_SDMMC__FORCE_ERROR_INT_STAT_R]  = { 0x52, "FORCE_ERROR_INT_STAT"},
    [NEXELL_SDMMC__ADMA_ERR_STAT_R]         = { 0x54, "ADMA_ERR_STAT"},
    [NEXELL_SDMMC__ADMA_SA_LOW_R]           = { 0x58, "ADMA_SA_LOW"},
    [NEXELL_SDMMC__ADMA_SA_HIGH_R]          = { 0x5c, "ADMA_SA_HIGH"},
    [NEXELL_SDMMC__PRESET_INIT_R]           = { 0x60, "PRESET_INIT"},
    [NEXELL_SDMMC__PRESET_DS_R]             = { 0x62, "PRESET_DS"},
    [NEXELL_SDMMC__PRESET_HS_R]             = { 0x64, "PRESET_HS"},
    [NEXELL_SDMMC__PRESET_SDR12_R]          = { 0x66, "PRESET_SDR12"},
    [NEXELL_SDMMC__PRESET_SDR25_R]          = { 0x68, "PRESET_SDR25"},
    [NEXELL_SDMMC__PRESET_SDR50_R]          = { 0x6a, "PRESET_SDR50"},
    [NEXELL_SDMMC__PRESET_SDR104_R]         = { 0x6c, "PRESET_SDR104"},
    [NEXELL_SDMMC__PRESET_DDR50_R]          = { 0x6e, "PRESET_DDR50"},
    [NEXELL_SDMMC__PRESET_UHS2_R]           = { 0x74, "PRESET_UHSS2"},
    [NEXELL_SDMMC__ADMA_ID_LOW_R]           = { 0x78, "ADMA_ID_LOW"},
    [NEXELL_SDMMC__ADMA_ID_HIGH_R]          = { 0x7c, "ADMA_ID_HIGH"},

};

/* static void update_irq(NexellSDMMCState *s) */
/* { */
/*     /\* int cond = 0; *\/ */
/*     /\* if ((s->ie & NEXELL_SDMMC_IE_RXWM) && s->rx_fifo_len) { *\/ */
/*     /\*     cond = 1; *\/ */
/*     /\* } *\/ */
/*     /\* if (cond) { *\/ */
/*     /\*     qemu_irq_raise(s->irq); *\/ */
/*     /\* } else { *\/ */
/*     /\*     qemu_irq_lower(s->irq); *\/ */
/*     /\* } *\/ */
/*     printf("[SUKER-QEMU-SDMMC] %s \n", __func__);     */
/* } */

static uint64_t
sdmmc_read(void *opaque, hwaddr offset, unsigned int size)
{
    NexellSDMMCState *s = opaque;
    int cnt = NEXELL_SDMMC_ENUM_MAX;
    uint64_t temp = 0;
    
    do {
        if (nx_sdmmc_regmap[cnt-1].offset == offset) {
            printf("[SUKER-QEMU-SDMMC] %s: %s: offset=0x%lx, ", \
                   __func__, \
                   nx_sdmmc_regmap[cnt-1].name, \
                   offset);
            break;
        }
        else
            cnt -= 1;
    } while(cnt > 0);

    switch (offset) {
    case NEXELL_SDMMC_OFFSET_SDMASA_R:                temp = s->SDMASA_R;       break;
    case NEXELL_SDMMC_OFFSET_BLOCKSIZE_R:             temp = s->BLOCKSIZE_R;    break; 
    case NEXELL_SDMMC_OFFSET_BLOCKCOUNT_R:            temp = s->BLOCKCOUNT_R;   break;
    case NEXELL_SDMMC_OFFSET_ARGUMENT_R:              temp = s->ARGUMENT_R;  break;  
    case NEXELL_SDMMC_OFFSET_XFER_MODE_R:             temp = s->XFER_MODE_R; break; 
    case NEXELL_SDMMC_OFFSET_CMD_R:                   temp = s->CMD_R;       break;       
    case NEXELL_SDMMC_OFFSET_RESP01_R:                temp = s->RESP01_R;    break;    
    case NEXELL_SDMMC_OFFSET_RESP23_R:                temp = s->RESP23_R;    break;    
    case NEXELL_SDMMC_OFFSET_RESP45_R:                temp = s->RESP45_R;    break;    
    case NEXELL_SDMMC_OFFSET_RESP67_R:                temp = s->RESP67_R;    break;    
    case NEXELL_SDMMC_OFFSET_BUF_DATA_R:              temp = s->BUF_DATA_R;    break;  
    case NEXELL_SDMMC_OFFSET_PSTATE_REG:              temp = s->PSTATE_REG;    break;  
    case NEXELL_SDMMC_OFFSET_HOST_CTRL1_R:            temp = s->HOST_CTRL1_R;  break;
    case NEXELL_SDMMC_OFFSET_PWR_CTRL_R:              temp = s->PWR_CTRL_R;    break;  
    case NEXELL_SDMMC_OFFSET_BGAP_CTRL_R:             temp = s->BGAP_CTRL_R;   break; 
    case NEXELL_SDMMC_OFFSET_WUP_CTRL_R:              temp = s->WUP_CTRL_R;    break;  
    case NEXELL_SDMMC_OFFSET_CLK_CTRL_R:              temp = s->CLK_CTRL_R;    break;  
    case NEXELL_SDMMC_OFFSET_TOUT_CTRL_R:             temp = s->TOUT_CTRL_R;   break; 
    case NEXELL_SDMMC_OFFSET_SW_RST_R:                temp = s->SW_RST_R;      break;    
    case NEXELL_SDMMC_OFFSET_NORMAL_INT_STAT_R:       temp = s->NORMAL_INT_STAT_R;    break;     
    case NEXELL_SDMMC_OFFSET_ERROR_INT_STAT_R:        temp = s->ERROR_INT_STAT_R;    break;      
    case NEXELL_SDMMC_OFFSET_NORMAL_INT_STAT_EN_R:    temp = s->NORMAL_INT_STAT_EN_R;    break;  
    case NEXELL_SDMMC_OFFSET_ERROR_INT_STAT_EN_R:     temp = s->ERROR_INT_STAT_EN_R;    break;   
    case NEXELL_SDMMC_OFFSET_NORMAL_INT_SIGNAL_EN_R:  temp = s->NORMAL_INT_SIGNAL_EN_R;    break;
    case NEXELL_SDMMC_OFFSET_ERROR_INT_SIGNAL_EN_R:   temp = s->ERROR_INT_SIGNAL_EN_R;    break; 
    case NEXELL_SDMMC_OFFSET_AUTO_CMD_STAT_R:         temp = s->AUTO_CMD_STAT_R;    break;       
    case NEXELL_SDMMC_OFFSET_HOST_CTRL2_R:            temp = s->HOST_CTRL2_R;    break;          
    case NEXELL_SDMMC_OFFSET_CAPABILITIES1_R:         temp = s->CAPABILITIES1_R;    break;       
    case NEXELL_SDMMC_OFFSET_CAPABILITIES2_R:         temp = s->CAPABILITIES2_R;    break;       
    case NEXELL_SDMMC_OFFSET_CURR_CAPABILITIES1_R:    temp = s->CURR_CAPABILITIES1_R;    break;  
    case NEXELL_SDMMC_OFFSET_CURR_CAPABILITIES2_R:    temp = s->CURR_CAPABILITIES2_R;    break;  
    case NEXELL_SDMMC_OFFSET_FORCE_AUTO_CMD_STAT_R:   temp = s->FORCE_AUTO_CMD_STAT_R;    break;
    case NEXELL_SDMMC_OFFSET_FORCE_ERROR_INT_STAT_R:  temp = s->FORCE_ERROR_INT_STAT_R;    break;
    case NEXELL_SDMMC_OFFSET_ADMA_ERR_STAT_R:         temp = s->ADMA_ERR_STAT_R;    break; 
    case NEXELL_SDMMC_OFFSET_ADMA_SA_LOW_R:           temp = s->ADMA_SA_LOW_R;    break;
    case NEXELL_SDMMC_OFFSET_ADMA_SA_HIGH_R:          temp = s->ADMA_SA_HIGH_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_INIT_R:           temp = s->PRESET_INIT_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_DS_R:             temp = s->PRESET_DS_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_HS_R:             temp = s->PRESET_HS_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_SDR12_R:          temp = s->PRESET_SDR12_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_SDR25_R:          temp = s->PRESET_SDR25_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_SDR50_R:          temp = s->PRESET_SDR50_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_SDR104_R:         temp = s->PRESET_SDR104_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_DDR50_R:          temp = s->PRESET_DDR50_R;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_UHS2_R:           temp = s->PRESET_UHS2_R;    break;
    case NEXELL_SDMMC_OFFSET_ADMA_ID_LOW_R:           temp = s->ADMA_ID_LOW_R;    break;
    case NEXELL_SDMMC_OFFSET_ADMA_ID_HIGH_R:          temp = s->ADMA_ID_HIGH_R;    break;
    }

    printf("val=%lu \n", temp);
    return temp;
}

static void
sdmmc_write(void *opaque, hwaddr offset,
           uint64_t val64, unsigned int size)
{
    NexellSDMMCState *s = opaque;

    int cnt = NEXELL_SDMMC_ENUM_MAX;

    do {
        if (nx_sdmmc_regmap[cnt-1].offset == offset) {
            printf("[SUKER-QEMU-SDMMC] %s: %s: write to offset=0x%lx, val=0x%lx\n", \
                   __func__, \
                   nx_sdmmc_regmap[cnt-1].name, \
                   offset,
                   val64);
            break;
        }
        else
            cnt -= 1;
    } while(cnt > 0);

    switch (offset) {
    case NEXELL_SDMMC_OFFSET_SDMASA_R:                s->SDMASA_R = val64;       break;
    case NEXELL_SDMMC_OFFSET_BLOCKSIZE_R:             s->BLOCKSIZE_R = val64;    break; 
    case NEXELL_SDMMC_OFFSET_BLOCKCOUNT_R:            s->BLOCKCOUNT_R = val64;   break;
    case NEXELL_SDMMC_OFFSET_ARGUMENT_R:              s->ARGUMENT_R = val64;  break;  
    case NEXELL_SDMMC_OFFSET_XFER_MODE_R:             s->XFER_MODE_R = val64; break; 
    case NEXELL_SDMMC_OFFSET_CMD_R:                   s->CMD_R = val64;       break;       
    case NEXELL_SDMMC_OFFSET_RESP01_R:                s->RESP01_R = val64;    break;    
    case NEXELL_SDMMC_OFFSET_RESP23_R:                s->RESP23_R = val64;    break;    
    case NEXELL_SDMMC_OFFSET_RESP45_R:                s->RESP45_R = val64;    break;    
    case NEXELL_SDMMC_OFFSET_RESP67_R:                s->RESP67_R = val64;    break;    
    case NEXELL_SDMMC_OFFSET_BUF_DATA_R:              s->BUF_DATA_R = val64;    break;  
    case NEXELL_SDMMC_OFFSET_PSTATE_REG:              s->PSTATE_REG = val64;    break;  
    case NEXELL_SDMMC_OFFSET_HOST_CTRL1_R:            s->HOST_CTRL1_R = val64;  break;
    case NEXELL_SDMMC_OFFSET_PWR_CTRL_R:              s->PWR_CTRL_R = val64;    break;  
    case NEXELL_SDMMC_OFFSET_BGAP_CTRL_R:             s->BGAP_CTRL_R = val64;   break; 
    case NEXELL_SDMMC_OFFSET_WUP_CTRL_R:              s->WUP_CTRL_R = val64;    break;  
    case NEXELL_SDMMC_OFFSET_CLK_CTRL_R:              s->CLK_CTRL_R = val64;    break;  
    case NEXELL_SDMMC_OFFSET_TOUT_CTRL_R:             s->TOUT_CTRL_R = val64;   break; 
    case NEXELL_SDMMC_OFFSET_SW_RST_R:                s->SW_RST_R = val64;      break;    
    case NEXELL_SDMMC_OFFSET_NORMAL_INT_STAT_R:       s->NORMAL_INT_STAT_R = val64;    break;     
    case NEXELL_SDMMC_OFFSET_ERROR_INT_STAT_R:        s->ERROR_INT_STAT_R = val64;    break;      
    case NEXELL_SDMMC_OFFSET_NORMAL_INT_STAT_EN_R:    s->NORMAL_INT_STAT_EN_R = val64;    break;  
    case NEXELL_SDMMC_OFFSET_ERROR_INT_STAT_EN_R:     s->ERROR_INT_STAT_EN_R = val64;    break;   
    case NEXELL_SDMMC_OFFSET_NORMAL_INT_SIGNAL_EN_R:  s->NORMAL_INT_SIGNAL_EN_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_ERROR_INT_SIGNAL_EN_R:   s->ERROR_INT_SIGNAL_EN_R = val64;    break; 
    case NEXELL_SDMMC_OFFSET_AUTO_CMD_STAT_R:         s->AUTO_CMD_STAT_R = val64;    break;       
    case NEXELL_SDMMC_OFFSET_HOST_CTRL2_R:            s->HOST_CTRL2_R = val64;       break;          
    case NEXELL_SDMMC_OFFSET_CAPABILITIES1_R:         s->CAPABILITIES1_R = val64;    break;       
    case NEXELL_SDMMC_OFFSET_CAPABILITIES2_R:         s->CAPABILITIES2_R = val64;    break;       
    case NEXELL_SDMMC_OFFSET_CURR_CAPABILITIES1_R:    s->CURR_CAPABILITIES1_R = val64;    break;  
    case NEXELL_SDMMC_OFFSET_CURR_CAPABILITIES2_R:    s->CURR_CAPABILITIES2_R = val64;    break;  
    case NEXELL_SDMMC_OFFSET_FORCE_AUTO_CMD_STAT_R:   s->FORCE_AUTO_CMD_STAT_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_FORCE_ERROR_INT_STAT_R:  s->FORCE_ERROR_INTTAT_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_ADMA_ERR_STAT_R:         s->ADMA_ERR_STAT_R val64;    break; 
    case NEXELL_SDMMC_OFFSET_ADMA_SA_LOW_R:           s->ADMA_SA_LOW_R =al64;   break;
    case NEXELL_SDMMC_OFFSET_ADMA_SA_HIGH_R:          s->ADMA_SA_HIGH_R val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_INIT_R:           s->PRESET_INIT_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_DS_R:             s->PRESET_DS_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_HS_R:             s->PRESET_HS_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_SDR12_R:          s->PRESET_SDR12_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_SDR25_R:          s->PRESET_SDR25_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_SDR50_R:          s->PRESET_SDR50_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_SDR104_R:         s->PRESET_SDR104_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_DDR50_R:          s->PRESET_DDR50_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_PRESET_UHS2_R:           s->PRESET_UHS2_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_ADMA_ID_LOW_R:           s->ADMA_ID_LOW_R = val64;    break;
    case NEXELL_SDMMC_OFFSET_ADMA_ID_HIGH_R:          s->ADMA_ID_HIGH_R = val64;    break;
        
    default:
        //hw_error("[SUKER_QEMU-ERROR] %s: bad read: offset=0x%x\n", __func__, (int)offset);
        break;
    }
    //printf("[SUKER-QEMU-SDMMC] %s \n", __func__);
}

static const MemoryRegionOps sdmmc_ops = {
    .read = sdmmc_read,
    .write = sdmmc_write,
    .endianness = DEVICE_NATIVE_ENDIAN,
    .valid = {
        .min_access_size = 4,
        .max_access_size = 4
    }
};


/* static int sdmmc_be_change(void *opaque) */
/* { */
/*     NexellSDMMCState *s = opaque; */

/*     qemu_chr_fe_set_handlers(&s->chr, sdmmc_can_rx, sdmmc_rx, sdmmc_event, */
/*         sdmmc_be_change, s, NULL, true); */

/*     return 0; */
/* } */

/*
 * Create SDMMC device.
 */
NexellSDMMCState *nexell_sdmmc_create(MemoryRegion *address_space, hwaddr base,
    qemu_irq irq)
{
    NexellSDMMCState *s = g_malloc0(sizeof(NexellSDMMCState));
    s->irq = irq;
    /* qemu_chr_fe_init(&s->chr, chr, &error_abort); */
    /* qemu_chr_fe_set_handlers(&s->chr, sdmmc_can_rx, sdmmc_rx, sdmmc_event, */
    /*     sdmmc_be_change, s, NULL, true); */
    memory_region_init_io(&s->mmio, NULL, &sdmmc_ops, s,
                          TYPE_NEXELL_SDMMC, sizeof(NexellSDMMCState));
    //NEXELL_SDMMC_MAX);
    memory_region_add_subregion(address_space, base, &s->mmio);
    return s;
}
