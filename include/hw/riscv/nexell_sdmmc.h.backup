/*
 * Raspberry Pi (NEXELL) SD Host Controller
 *
 * Copyright (c) 2017 Antfield SAS
 *
 * Authors:
 *  Clement Deschamps <clement.deschamps@antfield.fr>
 *  Luc Michel <luc.michel@antfield.fr>
 *
 * This work is licensed under the terms of the GNU GPL, version 2 or later.
 * See the COPYING file in the top-level directory.
 */

#ifndef NEXELL_SDMMC_H
#define NEXELL_SDMMC_H

#include "hw/sysbus.h"
#include "hw/sd/sd.h"

#define TYPE_NEXELL_SDMMC "riscv.nexell.sdmmc"
#define NEXELL_SDMMC(obj) \
        OBJECT_CHECK(NexellSDMMCState, (obj), TYPE_NEXELL_SDMMC)

#define NEXELL_SDMMC_FIFO_LEN 16
#define NEXELL_SWALLOW_NUM_SDMMC 3

typedef struct NexellSDMMCState
{
  //                                   offset       Description   
  unsigned int SDMASA_R;               //0x0        SDMA System Address Register
  unsigned short BLOCKSIZE_R;            //0x4        Block Size register
  unsigned short BLOCKCOUNT_R;           //0x6        16-bit Block Count Register
  unsigned int ARGUMENT_R;             //0x8        Argument Register
  unsigned short XFER_MODE_R;            //0xc        Transfer Mode Register
  unsigned short CMD_R;                  //0xe        Command Register
  unsigned int RESP01_R;               //0x10       Response Register 0/1
  unsigned int RESP23_R;               //0x14       Response Register 2/3
  unsigned int RESP45_R;               //0x18       Response Register 4/5
  unsigned int RESP67_R;               //0x1c       Response Register 6/7
  unsigned int BUF_DATA_R;             //0x20       Buffer DataPort Register
  unsigned int PSTATE_REG;             //0x24       Present State Register
  unsigned char  HOST_CTRL1_R;           //0x28       Host Control 1 Register
  unsigned char  PWR_CTRL_R;        //0x29       Power Control Register
  unsigned char  BGAP_CTRL_R;            //0x2a       Block Gap Contrl Register
  unsigned char  WUP_CTRL_R;             //0x2b       Wakeup Contrl Register
  unsigned short CLK_CTRL_R;        //0x2c       Clock Control Register
  unsigned char  TOUT_CTRL_R;      //0x2e       Timeout Control Register
  unsigned char  SW_RST_R;               //0x2f       Software Reset Register
  unsigned short NORMAL_INT_STAT_R;      //0x30       Normal Interrupt Status Register
  unsigned int ERROR_INT_STAT_R;       //0x32       Error Interrupt Status Register
  unsigned short NORMAL_INT_STAT_EN_R;   //0x34       Normal Interrupt Status Enable Register
  unsigned short ERROR_INT_STAT_EN_R;    //0x36       Error Interrupt Status Enable Register
  unsigned short NORMAL_INT_SIGNAL_EN_R; //0x38       Normal Interrupt Signal Enable Register
  unsigned short ERROR_INT_SIGNAL_EN_R;  //0x3a       Error Interrupt Signal Enable Register
  unsigned short AUTO_CMD_STAT_R;      //0x3c       Auto CMD Status Register
  unsigned short HOST_CTRL2_R;         //0x3e       Host Control 2 Register
  unsigned int CAPABILITIES1_R;        //0x40    Capabilities 1 Resiger - 0 to 31
  unsigned int CAPABILITIES2_R;        //0x44    Capabilities 1 Resiger - 32 to 63
  unsigned int CURR_CAPABILITIES1_R;   //0x48    Maximum Current Capabilities Resiger - 0 to 31
  unsigned int CURR_CAPABILITIES2_R;   //0x4c    Maximum Current Capabilities Resiger - 31 to 63
  unsigned short FORCE_AUTO_CMD_STAT_R;  //0x50  Force Event Register for Auto CMD Error Status register
  unsigned short FORCE_ERROR_INT_STAT_R; //0x52       Force Event Register for Error Interrupt Status
  
  unsigned short ADMA_ERR_STAT_R;        //0x54
  unsigned short ADMA_SA_LOW_R;          //0x58
  unsigned short ADMA_SA_HIGH_R;         //0x5c
  unsigned short PRESET_INIT_R;          //0x60
  unsigned short PRESET_DS_R;            //0x62
  unsigned short PRESET_HS_R;            //0x64
  unsigned short PRESET_SDR12_R;         //0x66
  unsigned short PRESET_SDR25_R;         //0x68
  unsigned short PRESET_SDR50_R;         //0x6a
  unsigned short PRESET_SDR104_R;        //0x6c
  unsigned short PRESET_DDR50_R;         //0x6e
  unsigned short PRESET_UHS2_R;          //0x74
  unsigned short ADMA_ID_LOW_R;          //0x78
  unsigned short ADMA_ID_HIGH_R;         //0x7c
  unsigned short UHS_II_BLOCK_SIZE_R;    //0x80
  unsigned short UHS_II_BLOCK_COUNT_R;   //0x84
  unsigned short UHS_II_COMMAND_PKT_0_3_R;   //0x88
  unsigned short UHS_II_COMMAND_PKT_4_7_R;   //0x8c
  unsigned short UHS_II_COMMAND_PKT_8_11_R;  //0x90
  unsigned short UHS_II_COMMAND_PKT_12_15_R; //0x94
  unsigned short UHS_II_COMMAND_PKT_16_19_R; //0x98
  unsigned short UHS_II_XFER_MODE_R;      //0x9c
  unsigned short UHS_II_CMD_R;            //0x9e
  unsigned short UHS_II_RESP_0_3_R;       //0xa0
  unsigned short UHS_II_RESP_4_7_R;       //0xa4
  unsigned short UHS_II_RESP_8_11_R;      //0xa8
  unsigned short UHS_II_RESP_12_15_R;     //0xac
  unsigned short UHS_II_RESP_16_19_R;     //0xb0
  unsigned short UHS_II_MSG_SEL_R;        //0xb4
  unsigned short UHS_II_MSG_R;            //0xb8
  unsigned short UHS_II_DEV_INTR_STATUS_R;//0xbc
  unsigned short UHS_II_DEV_SEL_R;        //0xbe
  unsigned short UHS_II_DEV_INR_CODE_R;   //0xbf
  unsigned short UHS_II_SOFT_RESET_R;     //0xc0
  unsigned short UHS_II_TIMER_CNTRL_R;    //0xc2
  unsigned short UHS_II_ERR_INTR_STATUS_R;//0xc4
  unsigned short UHS_II_ERR_INTR_STATUS_EN_R;  //0xc8
  unsigned short UHS_II_ERR_INTR_SIGNAL_EN_R;  //0xcc
  unsigned short P_UHS_II_SETTINGS_R;          //0xe0
  unsigned short P_UHS_II_HOST_CAPAB;          //0xe2
  unsigned short P_UHS_II_TEST;                //0xe4
  unsigned short P_EMBEDDED_CNTRL;             //0xe6
  unsigned short P_VENDOR_SPECIFIC_AREA;       //0xe8
  unsigned short P_VENDOR2_SPECIFIC_AREA;      //0xea
  unsigned short SLOT_INTR_STATUS_R;           //0xfc
  unsigned short HOST_CNTRL_VERS_R;            //0xfe       //Host Controller Version

  SysBusDevice busdev;
  SDBus sdbus;
  MemoryRegion mmio;

  qemu_irq irq;
} NexellSDMMCState;

enum {
    NEXELL_SDMMC__SDMASA_R,               
    NEXELL_SDMMC__BLOCKSIZE_R,            
    NEXELL_SDMMC__BLOCKCOUNT_R,           
    NEXELL_SDMMC__ARGUMENT_R,             
    NEXELL_SDMMC__XFER_MODE_R,            
    NEXELL_SDMMC__CMD_R,                  
    NEXELL_SDMMC__RESP01_R,               
    NEXELL_SDMMC__RESP23_R,               
    NEXELL_SDMMC__RESP45_R,               
    NEXELL_SDMMC__RESP67_R,               
    NEXELL_SDMMC__BUF_DATA_R,             
    NEXELL_SDMMC__PSTATE_REG,             
    NEXELL_SDMMC__HOST_CTRL1_R,           
    NEXELL_SDMMC__PWR_CTRL_R,             
    NEXELL_SDMMC__BGAP_CTRL_R,            
    NEXELL_SDMMC__WUP_CTRL_R,             
    NEXELL_SDMMC__CLK_CTRL_R,             
    NEXELL_SDMMC__TOUT_CTRL_R,            
    NEXELL_SDMMC__SW_RST_R,               
    NEXELL_SDMMC__NORMAL_INT_STAT_R,      
    NEXELL_SDMMC__ERROR_INT_STAT_R,       
    NEXELL_SDMMC__NORMAL_INT_STAT_EN_R,   
    NEXELL_SDMMC__ERROR_INT_STAT_EN_R,    
    NEXELL_SDMMC__NORMAL_INT_SIGNAL_EN_R, 
    NEXELL_SDMMC__ERROR_INT_SIGNAL_EN_R,  
    NEXELL_SDMMC__AUTO_CMD_STAT_R,        
    NEXELL_SDMMC__HOST_CTRL2_R,           
    NEXELL_SDMMC__CAPABILITIES1_R,        
    NEXELL_SDMMC__CAPABILITIES2_R,        
    NEXELL_SDMMC__CURR_CAPABILITIES1_R,   
    NEXELL_SDMMC__CURR_CAPABILITIES2_R,   
    NEXELL_SDMMC__FORCE_AUTO_CMD_STAT_R,
    NEXELL_SDMMC__FORCE_ERROR_INT_STAT_R,
    NEXELL_SDMMC__ADMA_ERR_STAT_R,
    NEXELL_SDMMC__ADMA_SA_LOW_R,         
    NEXELL_SDMMC__ADMA_SA_HIGH_R,        
    NEXELL_SDMMC__PRESET_INIT_R,         
    NEXELL_SDMMC__PRESET_DS_R,           
    NEXELL_SDMMC__PRESET_HS_R,           
    NEXELL_SDMMC__PRESET_SDR12_R,        
    NEXELL_SDMMC__PRESET_SDR25_R,        
    NEXELL_SDMMC__PRESET_SDR50_R,        
    NEXELL_SDMMC__PRESET_SDR104_R,       
    NEXELL_SDMMC__PRESET_DDR50_R,        
    NEXELL_SDMMC__PRESET_UHS2_R,         
    NEXELL_SDMMC__ADMA_ID_LOW_R,         
    NEXELL_SDMMC__ADMA_ID_HIGH_R,
    NEXELL_SDMMC_ENUM_MAX,
};

#define    NEXELL_SDMMC_OFFSET_SDMASA_R               0x00
#define    NEXELL_SDMMC_OFFSET_BLOCKSIZE_R            0x04
#define    NEXELL_SDMMC_OFFSET_BLOCKCOUNT_R           0x06
#define    NEXELL_SDMMC_OFFSET_ARGUMENT_R             0x08
#define    NEXELL_SDMMC_OFFSET_XFER_MODE_R            0x0c
#define    NEXELL_SDMMC_OFFSET_CMD_R                  0x0e
#define    NEXELL_SDMMC_OFFSET_RESP01_R               0x10
#define    NEXELL_SDMMC_OFFSET_RESP23_R               0x14
#define    NEXELL_SDMMC_OFFSET_RESP45_R               0x18
#define    NEXELL_SDMMC_OFFSET_RESP67_R               0x1c
#define    NEXELL_SDMMC_OFFSET_BUF_DATA_R             0x20
#define    NEXELL_SDMMC_OFFSET_PSTATE_REG             0x24
#define    NEXELL_SDMMC_OFFSET_HOST_CTRL1_R           0x28
#define    NEXELL_SDMMC_OFFSET_PWR_CTRL_R             0x29
#define    NEXELL_SDMMC_OFFSET_BGAP_CTRL_R            0x2a
#define    NEXELL_SDMMC_OFFSET_WUP_CTRL_R             0x2b
#define    NEXELL_SDMMC_OFFSET_CLK_CTRL_R             0x2c
#define    NEXELL_SDMMC_OFFSET_TOUT_CTRL_R            0x2e
#define    NEXELL_SDMMC_OFFSET_SW_RST_R               0x2f
#define    NEXELL_SDMMC_OFFSET_NORMAL_INT_STAT_R      0x30
#define    NEXELL_SDMMC_OFFSET_ERROR_INT_STAT_R       0x32
#define    NEXELL_SDMMC_OFFSET_NORMAL_INT_STAT_EN_R   0x34
#define    NEXELL_SDMMC_OFFSET_ERROR_INT_STAT_EN_R    0x36
#define    NEXELL_SDMMC_OFFSET_NORMAL_INT_SIGNAL_EN_R 0x38
#define    NEXELL_SDMMC_OFFSET_ERROR_INT_SIGNAL_EN_R  0x3a
#define    NEXELL_SDMMC_OFFSET_AUTO_CMD_STAT_R        0x3c
#define    NEXELL_SDMMC_OFFSET_HOST_CTRL2_R           0x3e
#define    NEXELL_SDMMC_OFFSET_CAPABILITIES1_R        0x40
#define    NEXELL_SDMMC_OFFSET_CAPABILITIES2_R        0x44
#define    NEXELL_SDMMC_OFFSET_CURR_CAPABILITIES1_R   0x48
#define    NEXELL_SDMMC_OFFSET_CURR_CAPABILITIES2_R   0x4c
#define    NEXELL_SDMMC_OFFSET_FORCE_AUTO_CMD_STAT_R  0x50
#define    NEXELL_SDMMC_OFFSET_FORCE_ERROR_INT_STAT_R 0x52
#define    NEXELL_SDMMC_OFFSET_ADMA_ERR_STAT_R        0x54
#define    NEXELL_SDMMC_OFFSET_ADMA_SA_LOW_R          0x58
#define    NEXELL_SDMMC_OFFSET_ADMA_SA_HIGH_R         0x5c
#define    NEXELL_SDMMC_OFFSET_PRESET_INIT_R          0x60
#define    NEXELL_SDMMC_OFFSET_PRESET_DS_R            0x62
#define    NEXELL_SDMMC_OFFSET_PRESET_HS_R            0x64
#define    NEXELL_SDMMC_OFFSET_PRESET_SDR12_R         0x66
#define    NEXELL_SDMMC_OFFSET_PRESET_SDR25_R         0x68
#define    NEXELL_SDMMC_OFFSET_PRESET_SDR50_R         0x6a
#define    NEXELL_SDMMC_OFFSET_PRESET_SDR104_R        0x6c
#define    NEXELL_SDMMC_OFFSET_PRESET_DDR50_R         0x6e
#define    NEXELL_SDMMC_OFFSET_PRESET_UHS2_R          0x74
#define    NEXELL_SDMMC_OFFSET_ADMA_ID_LOW_R          0x78
#define    NEXELL_SDMMC_OFFSET_ADMA_ID_HIGH_R         0x7c

NexellSDMMCState *nexell_sdmmc_create(MemoryRegion *address_space, hwaddr base, qemu_irq irq);

#endif
